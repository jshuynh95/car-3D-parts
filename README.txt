Traffic Flow Simulation project is intended to simulate vehicle flow through a signal (light) controlled intersection. The use of object-oriented programming and a graphical user interface is implemented with Java Swing. My intent is that the simulation models how cars, trucks, and buses arrive at the intersection at random intervals. They will queue up when the traffic light is red and proceed when the light changes to green. The visual representation of this process uses labeled boxes for the vehicle types and a color-coded traffic light. There are interactive buttons that will allow you, the user, to start, pause, and reset the simulation in real time.

With this traffic simulation project, I hope to demonstrate the several core key concepts taught in this course. I used inheritance with polymorphism through a base "vehicle" class, with subclasses such as "car," "truck," and "bus" representing the different types of vehicles. Vehicles are managed in a Queue to simulate First-In-First-Out (FIFO) behavior, reflecting how traffic builds up and is released based on light signals. A "javax.swing.Timer" is used to drive the simulation loop, updating the state of the traffic light and processing vehicle movement each second. Vehicle arrivals are randomized to reflect unpredictable traffic patterns, and configuration settings such as light durations, arrival rate, and total simulation time are loaded from an external config.txt file.

The program also features real-time statistics tracking. It displays the number of vehicles that have passed through the intersection, the time elapsed, and the average wait time for each vehicle. When the simulation concludes, it automatically writes these results to a file named stats.txt for later analysis. Exception handling is included to deal with missing or invalid configuration files, ensuring the program remains robust and user-friendly.

Overall, this project offers a practical and visual way to apply core Java programming concepts such as GUI design, class hierarchy, event-driven logic, file I/O, and exception handling. It intends to replicate real-world traffic flow in a simplified environment and can be used as a foundation for more complex simulations, including multi-lane intersections, adaptive traffic signals, or congestion modeling. By connecting code to a real-world system, this simulation can be used in solving and understanding everyday problems.  